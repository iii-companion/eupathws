#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Author: Sascha Steinbiss <ss34@sanger.ac.uk>
#  Copyright (c) 2016 Genome Research Ltd
#
#  Permission to use, copy, modify, and distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import argparse
import logging
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
from eupathtables.gaf_iterator import GAFIterator
from eupathtables.eupathtables import WebServiceIterator, TableInStream
from eupathtables.login import parse_login, get_session
from gt.extended import GFF3OutStream


parser = argparse.ArgumentParser(description='Export EuPathDB annotations to Companion '
                                             'compatible reference input.')
parser.add_argument('baseurl', metavar='DBNAME', type=str,
                    help='baseurl for webservices (everything in front of "/webservices")')
parser.add_argument('organism', metavar='ORG', type=str, help='organism')
parser.add_argument('-g', '--gaf', metavar='FILE', type=str,
                    help='GAF file to write (will be overwritten without warning!)',
                    dest='gaffile')
parser.add_argument('-i', '--ingaf', metavar='FILE', type=str,
                    help='input GAF file to include in resulting GAF',
                    dest='ingaffile')
parser.add_argument('-t', '--taxon', metavar='TID', type=int,
                    help='taxon ID to use in GAF file', dest='taxon_id')
parser.add_argument('-l', '--login', metavar='STRING', type=str,
                    help='login credentials (for locked QA sites) format user:pass',
                    dest='login')
parser.add_argument('-n', '--no-gff', action="store_true",
                    help='do not output GFF3', dest='no_gff')
parser.add_argument('-c', '--no-cache', action="store_true",
                    help='do not cache results', dest='no_cache')
parser.add_argument("-v", "--verbose", help="increase output verbosity",
                    action="store_true")
args = parser.parse_args()

login = parse_login(args.login)
session = get_session(args.baseurl, login)

wsit = WebServiceIterator(args.baseurl, args.organism,
                          cache=(not args.no_cache), session=session)
laststream = table_in_stream = TableInStream(wsit)

if not args.no_gff:
    laststream = gff_out_stream = GFF3OutStream(table_in_stream)

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)

fn = laststream.next_tree()
while fn:
    fn = laststream.next_tree()

if args.gaffile:
    if args.ingaffile:
        it = GAFIterator(open(args.ingaffile))
        table_in_stream.go_coll.add_from_gaf_iterator(it, table_in_stream)
    table_in_stream.go_coll.to_gafv1(open(args.gaffile, "w+"))
