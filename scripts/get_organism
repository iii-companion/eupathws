#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  Author: Sascha Steinbiss <ss34@sanger.ac.uk>
#  Copyright (c) 2016 Genome Research Ltd
#
#  Permission to use, copy, modify, and distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
import argparse
import logging
from eupathtables.fileset import create_fileset_for_organism, has_all_files
from eupathtables.login import parse_login, get_session

os.environ['GT_RETAINIDS'] = "yes"

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

parser = argparse.ArgumentParser(description='Export EuPathDB annotations to Companion '
                                             'compatible reference input.')
parser.add_argument('baseurl', metavar='DBNAME', type=str,
                    help='baseurl for webservices (everything in front of "/webservices")')
parser.add_argument('organism', metavar='ORG', type=str, help='organism')
parser.add_argument('-l', '--login', metavar='STRING', type=str,
                    help='login credentials (for locked QA sites) format user:pass',
                    dest='login')
parser.add_argument('-f', '--force', action="store_true",
                    help='force re-download of all organisms',
                    dest='force')
args = parser.parse_args()

login = parse_login(args.login)
session = get_session(args.baseurl, login)

if (not has_all_files(args.organism)) or args.force:
    create_fileset_for_organism(args.baseurl, args.organism, session)
else:
    logger.info("skipping organism %s, files already present" % args.organism)